// Generated by CoffeeScript 1.6.3
(function() {
  $(document).ready(function() {
    var app;
    app = window || {};
    if (app.constants == null) {
      app.constants = {};
    }
    app.constants = _.extend(app.constants, {
      playerSizeX: app.constants.canvasX / app.constants.canvasXBlock,
      playerSizeY: app.constants.canvasY / app.constants.canvasYBlock
    });
    app.constants = _.extend(app.constants, {
      playerFillStyle: "#0000FF",
      playerDeltaX: app.constants.playerSizeX / 2,
      playerDeltaY: app.constants.playerSizeY * 6,
      playerFallSpeed: app.constants.playerSizeX / 5,
      playerFallMultipler: 1.05
    });
    app.PlayerModel = Backbone.Model.extend({
      initialize: function() {
        this.on('change', this.validatePos);
        return this.setupFall();
      },
      setupFall: function() {
        return setInterval(this.fall.bind(this), 20);
      },
      moveRight: function() {
        this.set('x', this.get('x') + app.constants.playerDeltaX);
        return this.set('direction', 'RIGHT');
      },
      moveLeft: function() {
        this.set('x', this.get('x') - app.constants.playerDeltaX);
        return this.set('direction', 'LEFT');
      },
      jump: _.debounce(function() {
        return this.set('y', this.get('y') - app.constants.playerDeltaY);
      }, 50, true),
      validatePos: function() {
        var floorHeight;
        if (this.get('x') > app.constants.canvasX) {
          this.set('x', 0);
        } else if (this.get('x') < 0) {
          this.set('x', app.constants.canvasX);
        }
        floorHeight = _.max(_.map(this.blockX(), function(corner) {
          return app.rounds.height(corner) * app.constants.playerSizeX;
        }));
        if (this.get('y') > app.constants.canvasY - app.constants.playerSizeY - floorHeight) {
          return this.set('y', app.constants.canvasY - app.constants.playerSizeY - floorHeight);
        }
      },
      fall: function() {
        var floorHeight;
        floorHeight = _.max(_.map(this.blockX(), function(corner) {
          return app.rounds.height(corner) * app.constants.playerSizeX;
        }));
        if (this.get('y') !== app.constants.canvasY - app.constants.playerSizeY - floorHeight) {
          this.set('y', this.get('y') + this.get('fallSpeed'));
          return this.set('fallSpeed', app.constants.playerFallMultipler * this.get('fallSpeed'));
        } else {
          return this.set('fallSpeed', app.constants.playerFallSpeed);
        }
      },
      radius: function() {
        return app.constants.playerSizeX / 2;
      },
      blockX: function() {
        return [Math.floor((this.get('x') + 1) / app.constants.playerSizeX), Math.floor((this.get('x') + app.constants.playerSizeX - 1) / app.constants.playerSizeX)];
      },
      blockY: function() {
        return Math.floor(this.get('y') / app.constants.playerSizeY);
      }
    });
    return app.PlayerView = Backbone.View.extend({
      el: "#gameCanvas",
      initialize: function() {
        _.bindAll(this, "render");
        return this.model.view = this;
      },
      render: function(ctx) {
        var canvas;
        canvas = ($(this.el)[0]);
        ctx = canvas.getContext("2d");
        ctx.fillStyle = app.constants.playerFillStyle;
        return ctx.fillRect(this.model.get('x'), this.model.get('y'), app.constants.playerSizeX, app.constants.playerSizeY);
      }
    });
  });

}).call(this);
