// Generated by CoffeeScript 1.6.3
(function() {
  $(document).ready(function() {
    var app;
    app = window || {};
    if (app.preferences == null) {
      app.preferences = {};
    }
    app.preferences = _.extend(app.preferences, {
      soundOn: true
    });
    if (app.constants == null) {
      app.constants = {};
    }
    app.constants = _.extend(app.constants, {
      statsColor: "#007F00",
      statsFont: "16px Arial"
    });
    app.GameView = Backbone.View.extend({
      el: "body",
      events: {
        'keyup': 'logKey',
        'keydown': 'logKey'
      },
      logKey: function(e) {
        var bullet, bulletView;
        if (e.type === "keydown") {
          this.keyMap[e.keyCode] = true;
        } else if (e.type === "keyup") {
          this.keyMap[e.keyCode] = false;
        }
        if (e.type === "keydown") {
          if (e.keyCode === 32) {
            if (app.preferences.soundOn) {
              app.bulletAudio.currentTime = 0;
              app.bulletAudio.play();
            }
            bullet = new app.BulletModel({
              x: app.playerModel.get('x'),
              y: app.playerModel.get('y'),
              direction: app.playerModel.get('direction'),
              active: true
            });
            bulletView = new app.BulletView({
              model: bullet
            });
            app.bullets.add(bullet);
          }
          if (e.keyCode === 83) {
            app.preferences.soundOn = !app.preferences.soundOn;
          }
          if (e.keyCode === 78) {
            app.monsters.reset();
            app.bullets.reset();
            return app.rounds.nextRound();
          }
        }
      },
      movePlayer: function() {
        if (this.keyMap[39]) {
          app.playerModel.moveRight();
        }
        if (this.keyMap[37]) {
          app.playerModel.moveLeft();
        }
        if (this.keyMap[38]) {
          return app.playerModel.jump();
        }
      },
      collisionDetection: function() {
        app.bullets.forEach(function(bullet) {
          if (bullet.get('active')) {
            return app.monsters.forEach(function(monster) {
              if (monster.get('active')) {
                if (app.distance(bullet, monster) < bullet.radius() + monster.radius()) {
                  monster.set('active', false);
                  bullet.set('active', false);
                  return app.score += 1;
                }
              }
            });
          }
        });
        return app.monsters.forEach(function(monster) {
          if (monster.get('active')) {
            if (app.distance(app.playerModel, monster) < app.playerModel.radius() + monster.radius()) {
              return app.gameView.gameOver();
            }
          }
        });
      },
      gameOver: function() {
        console.log("GAME OVER");
        clearInterval(app.gameTimer);
        return $('body').append("<h1> GAME OVER </h1> <h2> Score " + app.score);
      },
      render: function() {
        var canvas, ctx;
        canvas = ($("#gameCanvas")[0]);
        ctx = canvas.getContext("2d");
        if (app.rounds.getBackground()) {
          ctx.drawImage(app.rounds.getBackground(), 0, 0, app.constants.canvasX, app.constants.canvasY);
        } else {
          ctx.clearRect(0, 0, canvas.width, canvas.height);
        }
        app.playerModel.view.render();
        app.bullets.renderAll();
        app.monsters.renderAll();
        app.rounds.render();
        return this.renderStats();
      },
      renderStats: function() {
        var canvas, ctx, x, y, _ref;
        canvas = ($("#gameCanvas")[0]);
        ctx = canvas.getContext("2d");
        ctx.fillStyle = app.constants.statsColor;
        ctx.font = app.constants.statsFont;
        _ref = [app.constants.canvasX - 200, 50], x = _ref[0], y = _ref[1];
        ctx.strokeRect(x - 5, y - 20, 190, 110);
        ctx.fillText("Round-Wave: " + (app.rounds.getRoundNumber()) + "-" + (app.rounds.getWaveNumber()), x, y);
        ctx.fillText("Monsters Left: " + (app.monsters.alive()), x, y + 20);
        ctx.fillText("Total Monsters Killed: " + app.score, x, y + 40);
        ctx.fillText("Frame Number: " + app.gameCounter, x, y + 60);
        return ctx.fillText("Player (x,y): " + (app.playerModel.blockX()) + ", " + (app.playerModel.blockY()), x, y + 80);
      },
      renderGrid: function() {
        var canvas, ctx, currX, currY, _results;
        canvas = ($("#gameCanvas")[0]);
        ctx = canvas.getContext("2d");
        currX = 0;
        while (currX < app.constants.canvasX) {
          ctx.beginPath();
          ctx.moveTo(currX, 0);
          ctx.lineTo(currX, app.constants.canvasY);
          ctx.stroke();
          currX += app.constants.playerSizeX;
        }
        currY = 0;
        _results = [];
        while (currY < app.constants.canvasY) {
          ctx.beginPath();
          ctx.moveTo(0, currY);
          ctx.lineTo(app.constants.canvasX, currY);
          ctx.stroke();
          _results.push(currY += app.constants.playerSizeY);
        }
        return _results;
      },
      gameLoop: function() {
        app.gameCounter += 1;
        app.rounds.update();
        this.movePlayer();
        app.monsters.moveAll();
        app.bullets.moveAll();
        this.collisionDetection();
        return this.render();
      },
      initialize: function() {
        var canvas;
        canvas = ($('#gameCanvas')[0]);
        canvas.width = app.constants.canvasX;
        canvas.height = app.constants.canvasY;
        app.playerModel = new app.PlayerModel({
          x: 0,
          y: 0,
          fallSpeed: 1,
          direction: "RIGHT"
        });
        app.playerView = new app.PlayerView({
          model: app.playerModel
        });
        app.bullets = new app.Bullets;
        app.monsters = new app.Monsters;
        app.rounds = new app.Rounds;
        this.keyMap = {};
        return app.gameTimer = setInterval(this.gameLoop.bind(this), 25);
      }
    });
    app.distance = function(modelA, modelB) {
      return Math.sqrt((Math.pow(modelA.get('x') - modelB.get('x'), 2)) + (Math.pow(modelA.get('y') - modelB.get('y'), 2)));
    };
    app.score = 0;
    app.gameCounter = 0;
    app.gameView = new app.GameView;
    app.numberOfMonsters = 1;
    return app.bulletAudio = new Audio('audio/laser.wav');
  });

}).call(this);
